{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/Waveform.js\";\n\n/*eslint-disable */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Waveform extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTogglePlay = () => {\n      if (this.state.playing) {\n        this.wavesurfer.pause();\n        this.setState({\n          playing: !this.state.playing\n        });\n      } else {\n        this.wavesurfer.play();\n        this.setState({\n          playing: !this.state.playing\n        });\n      }\n    };\n\n    this.handleStop = () => {\n      this.setState(prevState => {\n        this.wavesurfer.stop();\n        return {\n          playing: false,\n          pos: 0\n        };\n      });\n    };\n\n    this.state = {\n      playing: false,\n      pos: 0\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          waveHeight = _this$props.waveHeight,\n          responsive = _this$props.responsive,\n          splitChannels = _this$props.splitChannels,\n          mediaControls = _this$props.mediaControls,\n          maxCanvasWidth = _this$props.maxCanvasWidth;\n    this.$el = ReactDOM.findDOMNode(this);\n    this.$waveform = this.$el.querySelector(\".wave\");\n\n    if (this.$waveform) {\n      this.wavesurfer = WaveSurfer.create({\n        container: this.$waveform,\n        mediaType: \"audio\",\n        waveColor: \"red\",\n        progressColor: \"blue\",\n        partialRender: true,\n        barWidth: .5,\n        height: waveHeight,\n        maxCanvasWidth: maxCanvasWidth,\n        splitChannels: splitChannels,\n        mediaControls: mediaControls,\n        responsive: responsive\n      }); // this.$waveform.style.backgroundColor = \"black\"\n\n      this.wavesurfer.load(this.props.song_link);\n    } else {\n      console.log('waveform loading...');\n    }\n  }\n\n  render() {\n    // return this.props.src ? (\n    return React.createElement(\"div\", {\n      className: \"waveform\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      name: \"play-pause\",\n      onClick: this.handleTogglePlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Play/Pause\"), React.createElement(\"button\", {\n      name: \"stop\",\n      onClick: this.handleStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Stop\")); // : ( \n    //   <div className='waveform'>da feeed is loadin..................</div>\n    // )\n  }\n\n}\n\nexport default connect(null, null)(withRouter(Waveform)); // Waveform.defaultProps = {\n//   src: \"\"\n// }","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/Waveform.js"],"names":["React","ReactDOM","WaveSurfer","connect","withRouter","Waveform","Component","constructor","props","handleTogglePlay","state","playing","wavesurfer","pause","setState","play","handleStop","prevState","stop","pos","componentDidMount","waveHeight","responsive","splitChannels","mediaControls","maxCanvasWidth","$el","findDOMNode","$waveform","querySelector","create","container","mediaType","waveColor","progressColor","partialRender","barWidth","height","load","song_link","console","log","render"],"mappings":"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","sourcesContent":["/*eslint-disable */\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport WaveSurfer from \"wavesurfer.js\"\nimport { connect } from \"react-redux\"\nimport { withRouter } from \"react-router-dom\"\n\nclass Waveform extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      playing: false,\n      pos: 0\n    }\n  }\n  componentDidMount() {\n    const { waveHeight, responsive, splitChannels, mediaControls, maxCanvasWidth } = this.props\n    this.$el = ReactDOM.findDOMNode(this)\n    this.$waveform = this.$el.querySelector(\".wave\")\n    if (this.$waveform) {\n      this.wavesurfer = WaveSurfer.create({\n        container: this.$waveform,\n        mediaType: \"audio\",\n        waveColor: \"red\",\n        progressColor: \"blue\",\n        partialRender: true,\n        barWidth: .5,\n        height: waveHeight,\n        maxCanvasWidth: maxCanvasWidth,\n        splitChannels: splitChannels,\n        mediaControls: mediaControls,\n        responsive: responsive\n      })\n      // this.$waveform.style.backgroundColor = \"black\"\n      this.wavesurfer.load(this.props.song_link)\n    } else {\n      console.log('waveform loading...')\n    }\n  }\n\n  handleTogglePlay = () => {\n    if (this.state.playing) {\n      this.wavesurfer.pause()\n      this.setState({ playing: !this.state.playing })\n    } else {\n      this.wavesurfer.play()\n      this.setState({ playing: !this.state.playing })\n    }\n  }\n\n  handleStop = () => {\n    this.setState(prevState => {\n      this.wavesurfer.stop()\n      return { playing: false, pos: 0 }\n    })\n  }\n\n  render() {\n    // return this.props.src ? (\n    return (\n      <div className=\"waveform\">\n        <div className=\"wave\"></div>\n        <button name=\"play-pause\" onClick={this.handleTogglePlay}>\n          Play/Pause\n        </button>\n        <button name=\"stop\" onClick={this.handleStop}>\n          Stop\n        </button>\n      </div>\n    ) \n    // : ( \n    //   <div className='waveform'>da feeed is loadin..................</div>\n    // )\n  }\n}\n\nexport default connect(\n  null,\n  null\n)(withRouter(Waveform))\n\n// Waveform.defaultProps = {\n//   src: \"\"\n// }\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// ! All actions go in here\nconst fetchUsersUrl = \"http://localhost:3000/users\";\nconst fetchSongsUrl = \"http://localhost:3000/songs\";\nexport function loginUser(user) {\n  console.log(\"login\");\n  return {\n    type: \"LOGIN_USER\",\n    user\n  };\n}\nexport function logoutUser() {\n  console.log(\"logout\");\n  return {\n    type: \"LOGOUT_USER\"\n  };\n}\nexport function loginCurrentUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        console.log(data);\n      } else {\n        localStorage.token = data.jwt;\n        dispatch(loginUser(data.user));\n        history.push(\"/profile\");\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function currentUser(history) {\n  return dispatch => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        // \"Content-Type\": \"application/json\",\n        // \"Accept\": \"application/json\",\n        Authorization: \"Bearer \".concat(token)\n      }\n    };\n    return fetch(\"http://localhost:3000/api/v1/current_user\", reqObj).then(res => res.json()).then(data => {\n      if (data.error) {\n        // Handle Error\n        console.log(\"currentUser error: \", data);\n      } else {\n        dispatch(loginUser(data.user)); // history.push(\"/profile\")\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function registerUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch(fetchUsersUrl, reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle Error\n        console.log(data.error);\n      } else {\n        localStorage.token = data.jwt;\n        dispatch(loginUser(data.user));\n        history.push(\"/profile\");\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function setAllUsers(allUsers) {\n  return {\n    type: \"SET_ALL_USERS\",\n    allUsers\n  };\n}\nexport function fetchAllUsers() {\n  // TODO To fetch all the users from the database\n  return dispatch => {\n    return fetch(fetchUsersUrl).then(resp => resp.json()).then(data => {\n      // console.log(data)\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        dispatch(setAllUsers(data));\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function setAllSongs(allSongs) {\n  return {\n    type: \"SET_ALL_SONGS\",\n    allSongs\n  };\n}\nexport function fetchAllSongs() {\n  // TODO To fetch all the songs from the database\n  return dispatch => {\n    return fetch(fetchSongsUrl).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        dispatch(setAllSongs(data));\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function setCurrentSong(currentSong) {\n  return {\n    type: \"SET_CURRENT_SONG\",\n    currentSong\n  };\n}\nexport function postNewSong(formData, user_id, history) {\n  // TODO Send POST fetch request to activestorage with attached audio file\n  return dispatch => {\n    console.log(\"post da new song bruh\", formData);\n    const title = formData.title,\n          genre = formData.genre,\n          description = formData.description,\n          song_link = formData.song_link;\n    let songData = new FormData();\n    songData.append(\"song_link\", song_link); // songData.append(\"song[title]\", title)\n    // songData.append(\"song[genre]\", genre)\n    // songData.append(\"song[description]\", description)\n    // songData.append(\"song[user_id]\", user_id)\n\n    console.log(songData); // const songData = {...this.state, song_link: newAudio, user_id: this.props.currentUser.id}\n\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        Accepts: \"application/json\" // Accepts: \"multipart/form-data\",\n        // \"Content-Type\": \"multipart/form-data\"\n\n      },\n      body: songData\n    };\n    return fetch(fetchSongsUrl, reqObj).then(res => res.json()).then(data => {\n      if (data.error) {\n        console.log(\"error: \", data.error);\n      } else {\n        // TODO Redirect to the created song page\n        console.log(\"success: \", data); // dispatch(setCurrentSong(data))\n\n        history.push(\"/songs/\".concat(data.id));\n      }\n    }).catch(err => console.log(err));\n  };\n}","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/actions/index.js"],"names":["fetchUsersUrl","fetchSongsUrl","loginUser","user","console","log","type","logoutUser","loginCurrentUser","formData","history","dispatch","reqObj","method","headers","body","JSON","stringify","fetch","then","resp","json","data","error","localStorage","token","jwt","push","catch","err","currentUser","Authorization","res","registerUser","setAllUsers","allUsers","fetchAllUsers","setAllSongs","allSongs","fetchAllSongs","setCurrentSong","currentSong","postNewSong","user_id","title","genre","description","song_link","songData","FormData","append","Accepts","id"],"mappings":"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","sourcesContent":["// ! All actions go in here\nconst fetchUsersUrl = \"http://localhost:3000/users\"\nconst fetchSongsUrl = \"http://localhost:3000/songs\"\n\nexport function loginUser(user) {\n  console.log(\"login\")\n  return {\n    type: \"LOGIN_USER\",\n    user\n  }\n}\n\nexport function logoutUser() {\n  console.log(\"logout\")\n  return {\n    type: \"LOGOUT_USER\"\n  }\n}\n\nexport function loginCurrentUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData)\n    }\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          console.log(data)\n        } else {\n          localStorage.token = data.jwt\n          dispatch(loginUser(data.user))\n          history.push(\"/profile\")\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport function currentUser(history) {\n  return dispatch => {\n    const token = localStorage.token\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        // \"Content-Type\": \"application/json\",\n        // \"Accept\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    }\n    return fetch(\"http://localhost:3000/api/v1/current_user\", reqObj)\n      .then(res => res.json())\n      .then(data => {\n        if (data.error) {\n          // Handle Error\n          console.log(\"currentUser error: \", data)\n        } else {\n          dispatch(loginUser(data.user))\n          // history.push(\"/profile\")\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport function registerUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData)\n    }\n    return fetch(fetchUsersUrl, reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle Error\n          console.log(data.error)\n        } else {\n          localStorage.token = data.jwt\n          dispatch(loginUser(data.user))\n          history.push(\"/profile\")\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport function setAllUsers(allUsers) {\n  return {\n    type: \"SET_ALL_USERS\",\n    allUsers\n  }\n}\n\nexport function fetchAllUsers() {\n  // TODO To fetch all the users from the database\n  return dispatch => {\n    return fetch(fetchUsersUrl)\n      .then(resp => resp.json())\n      .then(data => {\n        // console.log(data)\n        if (data.error) {\n          console.log(data.error)\n        } else {\n          dispatch(setAllUsers(data))\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport function setAllSongs(allSongs) {\n  return {\n    type: \"SET_ALL_SONGS\",\n    allSongs\n  }\n}\n\nexport function fetchAllSongs() {\n  // TODO To fetch all the songs from the database\n  return dispatch => {\n    return fetch(fetchSongsUrl)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          console.log(data.error)\n        } else {\n          dispatch(setAllSongs(data))\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport function setCurrentSong(currentSong) {\n  return {\n    type: \"SET_CURRENT_SONG\",\n    currentSong\n  }\n}\n\nexport function postNewSong(formData, user_id, history) {\n  // TODO Send POST fetch request to activestorage with attached audio file\n  return dispatch => {\n    console.log(\"post da new song bruh\", formData)\n    const { title, genre, description, song_link } = formData\n    let songData = new FormData()\n    songData.append(\"song_link\", song_link)\n    // songData.append(\"song[title]\", title)\n    // songData.append(\"song[genre]\", genre)\n    // songData.append(\"song[description]\", description)\n    // songData.append(\"song[user_id]\", user_id)\n    console.log(songData)\n    // const songData = {...this.state, song_link: newAudio, user_id: this.props.currentUser.id}\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        Accepts: \"application/json\"\n        // Accepts: \"multipart/form-data\",\n        // \"Content-Type\": \"multipart/form-data\"\n      },\n      body: songData\n    }\n    return fetch(fetchSongsUrl, reqObj)\n      .then(res => res.json())\n      .then(data => {\n        if (data.error) {\n          console.log(\"error: \", data.error)\n        } else {\n          // TODO Redirect to the created song page\n          console.log(\"success: \", data)\n          // dispatch(setCurrentSong(data))\n          history.push(`/songs/${data.id}`)\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
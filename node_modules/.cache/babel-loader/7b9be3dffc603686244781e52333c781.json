{"ast":null,"code":"import _defineProperty from \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/NewSongForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Form, Grid, Header, Message, Segment } from \"semantic-ui-react\";\nimport ActiveStorageProvider from \"react-activestorage-provider\";\n\nclass NewSongForm extends Component {\n  constructor(props) {\n    super();\n\n    this.handleNewSongSubmit = e => {\n      e.preventDefault();\n      console.log(this.audioInput.current.files[0]);\n      const newAudio = this.audioInput.current.files[0];\n\n      const stateWithAudio = _objectSpread({}, this.state, {\n        song_link: newAudio,\n        user_id: this.props.currentUser.id\n      });\n\n      console.log(stateWithAudio);\n      const fetchSongsUrl = \"http://localhost:3000/songs\";\n      const reqObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(stateWithAudio)\n      }; // debugger\n\n      fetch(fetchSongsUrl, reqObj).then(res => res.json()).then(console.log);\n    };\n\n    this.handleNewSongChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.audioInput = React.createRef();\n    this.state = {\n      title: \"\",\n      genre: \"\",\n      description: \"\",\n      user_id: \"\" // song_link: ''\n\n    };\n  }\n\n  render() {\n    console.log(this.state);\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      className: \"new-song-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      textAlign: \"center\",\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Form, {\n      size: \"large\",\n      onSubmit: this.handleNewSongSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"New Song\"), React.createElement(Form.Input, {\n      onChange: this.handleNewSongChange,\n      placeholder: \"Title\",\n      type: \"text\",\n      name: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      onChange: this.handleNewSongChange,\n      placeholder: \"Genre\",\n      type: \"text\",\n      name: \"genre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      onChange: this.handleNewSongChange,\n      placeholder: \"Description\",\n      type: \"text\",\n      name: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(ActiveStorageProvider, {\n      endpoint: {\n        path: \"/songs\",\n        model: \"Song\",\n        attribute: \"song_link\",\n        method: \"POST\"\n      } // onSubmit={user => this.setState({ avatar: user.avatar })}\n      ,\n      render: ({\n        handleUpload,\n        uploads,\n        ready\n      }) => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        disabled: !ready,\n        onChange: e => handleUpload(e.currentTarget.files),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), uploads.map(upload => {\n        switch (upload.state) {\n          case \"waiting\":\n            return React.createElement(\"p\", {\n              key: upload.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 92\n              },\n              __self: this\n            }, \"Waiting to upload \", upload.file.name);\n\n          case \"uploading\":\n            return React.createElement(\"p\", {\n              key: upload.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98\n              },\n              __self: this\n            }, \"Uploading \", upload.file.name, \": \", upload.progress, \"%\");\n\n          case \"error\":\n            return React.createElement(\"p\", {\n              key: upload.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            }, \"Error uploading \", upload.file.name, \":\", \" \", upload.error);\n\n          case \"finished\":\n            return React.createElement(\"p\", {\n              key: upload.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 111\n              },\n              __self: this\n            }, \"Finished uploading \", upload.file.name);\n        }\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      primary: true,\n      fluid: true,\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Submit New Song\"))))));\n  }\n\n}\n\nexport default connect(null, null)(NewSongForm);","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/NewSongForm.js"],"names":["React","Component","connect","Button","Form","Grid","Header","Message","Segment","ActiveStorageProvider","NewSongForm","constructor","props","handleNewSongSubmit","e","preventDefault","console","log","audioInput","current","files","newAudio","stateWithAudio","state","song_link","user_id","currentUser","id","fetchSongsUrl","reqObj","method","headers","body","JSON","stringify","fetch","then","res","json","handleNewSongChange","setState","target","name","value","createRef","title","genre","description","render","path","model","attribute","handleUpload","uploads","ready","currentTarget","map","upload","file","progress","error"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Button, Form, Grid, Header, Message, Segment } from \"semantic-ui-react\"\nimport ActiveStorageProvider from \"react-activestorage-provider\"\n\nclass NewSongForm extends Component {\n  constructor(props) {\n    super()\n    this.audioInput = React.createRef()\n    this.state = {\n      title: \"\",\n      genre: \"\",\n      description: \"\",\n      user_id: \"\"\n      // song_link: ''\n    }\n  }\n\n  handleNewSongSubmit = e => {\n    e.preventDefault()\n    console.log(this.audioInput.current.files[0])\n    const newAudio = this.audioInput.current.files[0]\n    const stateWithAudio = {\n      ...this.state,\n      song_link: newAudio,\n      user_id: this.props.currentUser.id\n    }\n    console.log(stateWithAudio)\n    const fetchSongsUrl = \"http://localhost:3000/songs\"\n    const reqObj = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(stateWithAudio)\n    }\n    // debugger\n    fetch(fetchSongsUrl, reqObj)\n      .then(res => res.json())\n      .then(console.log)\n  }\n\n  handleNewSongChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n  render() {\n    console.log(this.state)\n    console.log(this.props)\n    return (\n      <div className=\"new-song-form\">\n        <Grid textAlign=\"center\" verticalAlign=\"middle\">\n          <Grid.Column>\n            <Form size=\"large\" onSubmit={this.handleNewSongSubmit}>\n              <Segment stacked>\n                <Header as=\"h1\">New Song</Header>\n                <Form.Input\n                  onChange={this.handleNewSongChange}\n                  placeholder=\"Title\"\n                  type=\"text\"\n                  name=\"title\"\n                />\n                <Form.Input\n                  onChange={this.handleNewSongChange}\n                  placeholder=\"Genre\"\n                  type=\"text\"\n                  name=\"genre\"\n                />\n                <Form.Input\n                  onChange={this.handleNewSongChange}\n                  placeholder=\"Description\"\n                  type=\"text\"\n                  name=\"description\"\n                />\n                <ActiveStorageProvider\n                  endpoint={{\n                    path: \"/songs\",\n                    model: \"Song\",\n                    attribute: \"song_link\",\n                    method: \"POST\"\n                  }}\n                  // onSubmit={user => this.setState({ avatar: user.avatar })}\n                  render={({ handleUpload, uploads, ready }) => (\n                    <div>\n                      <input\n                        type=\"file\"\n                        disabled={!ready}\n                        onChange={e => handleUpload(e.currentTarget.files)}\n                      />\n\n                      {uploads.map(upload => {\n                        switch (upload.state) {\n                          case \"waiting\":\n                            return (\n                              <p key={upload.id}>\n                                Waiting to upload {upload.file.name}\n                              </p>\n                            )\n                          case \"uploading\":\n                            return (\n                              <p key={upload.id}>\n                                Uploading {upload.file.name}: {upload.progress}%\n                              </p>\n                            )\n                          case \"error\":\n                            return (\n                              <p key={upload.id}>\n                                Error uploading {upload.file.name}:{\" \"}\n                                {upload.error}\n                              </p>\n                            )\n                          case \"finished\":\n                            return (\n                              <p key={upload.id}>\n                                Finished uploading {upload.file.name}\n                              </p>\n                            )\n                        }\n                      })}\n                    </div>\n                  )}\n                />\n\n                <Button type=\"submit\" primary fluid size=\"large\">\n                  Submit New Song\n                </Button>\n              </Segment>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  null,\n  null\n)(NewSongForm)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/SongShowPage.js\";\nimport React, { Component } from \"react\";\nimport Waveform from \"./Waveform\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\nclass SongShowPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.findSong = displaySongID => {\n      if (this.props.allSongs.length > 0) {\n        return this.props.allSongs.find(u => {\n          console.log(u.song.id, displaySongID);\n          return u.id === displaySongID;\n        });\n      }\n    };\n  }\n\n  render() {\n    // TODO need current song\n    console.log(this.props);\n    const displaySongID = Number(this.props.history.location.pathname.slice(6)); // const { username, name, location, bio, id } = this.props.user\n    // const { allSongs } = this.props\n    // this.props.fetchFollowing(this.props.user.id)\n\n    const displaySong = this.findSong(displaySongID);\n    console.log(displaySong); // const { username, name, location, bio, id } = displayUser\n    // const isCurrentUser = id === this.props.user.id\n    // const isFollowing = this.props.user.id === this.props.followeds.find(f => f.id === id )\n    // console.log('current user? ', isCurrentUser)\n    // console.log('following? ', isFollowing)\n\n    return React.createElement(\"div\", {\n      className: \"song-show\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Waveform // song={song}\n    // song_link={songData.song_link}\n    , {\n      song: null,\n      song_link: null,\n      waveHeight: 100,\n      responsive: true,\n      splitChannels: false,\n      mediaControls: true,\n      maxCanvasWidth: 500,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    allSongs: state.allSongs\n  };\n};\n\nexport default connect(mapStateToProps, null // { currentSong }\n)(withRouter(SongShowPage));","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/SongShowPage.js"],"names":["React","Component","Waveform","withRouter","connect","SongShowPage","findSong","displaySongID","props","allSongs","length","find","u","console","log","song","id","render","Number","history","location","pathname","slice","displaySong","mapStateToProps","state","user"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAEnCK,QAFmC,GAExBC,aAAa,IAAI;AAC1B,UAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,GAA6B,CAAjC,EAAoC;AAClC,eAAO,KAAKF,KAAL,CAAWC,QAAX,CAAoBE,IAApB,CAAyBC,CAAC,IAAI;AACnCC,UAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,IAAF,CAAOC,EAAnB,EAAuBT,aAAvB;AACA,iBAAOK,CAAC,CAACI,EAAF,KAAST,aAAhB;AACD,SAHM,CAAP;AAID;AACF,KATkC;AAAA;;AAWnCU,EAAAA,MAAM,GAAG;AACP;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAjB;AACA,UAAMD,aAAa,GAAGW,MAAM,CAAC,KAAKV,KAAL,CAAWW,OAAX,CAAmBC,QAAnB,CAA4BC,QAA5B,CAAqCC,KAArC,CAA2C,CAA3C,CAAD,CAA5B,CAHO,CAIP;AACA;AACA;;AACA,UAAMC,WAAW,GAAG,KAAKjB,QAAL,CAAcC,aAAd,CAApB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYS,WAAZ,EARO,CASP;AACA;AACA;AACA;AACA;;AAEA,WACE;AAAK,MAAA,SAAS,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD,CACE;AACA;AAFF;AAGE,MAAA,IAAI,EAAE,IAHR;AAIE,MAAA,SAAS,EAAE,IAJb;AAKE,MAAA,UAAU,EAAE,GALd;AAME,MAAA,UAAU,EAAE,IANd;AAOE,MAAA,aAAa,EAAE,KAPjB;AAQE,MAAA,aAAa,EAAE,IARjB;AASE,MAAA,cAAc,EAAE,GATlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAeD;;AAzCkC;;AA4CrC,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAED,KAAK,CAACC,IADP;AAELjB,IAAAA,QAAQ,EAAEgB,KAAK,CAAChB;AAFX,GAAP;AAID,CALD;;AAOA,eAAeL,OAAO,CACpBoB,eADoB,EAEpB,IAFoB,CAGpB;AAHoB,CAAP,CAIbrB,UAAU,CAACE,YAAD,CAJG,CAAf","sourcesContent":["import React, { Component } from \"react\"\nimport Waveform from \"./Waveform\"\nimport { withRouter } from \"react-router-dom\"\nimport {connect} from 'react-redux'\n\nclass SongShowPage extends Component {\n\n  findSong = displaySongID => {\n    if (this.props.allSongs.length > 0) {\n      return this.props.allSongs.find(u => {\n        console.log(u.song.id, displaySongID)\n        return u.id === displaySongID\n      })\n    }\n  }\n\n  render() {\n    // TODO need current song\n    console.log(this.props)\n    const displaySongID = Number(this.props.history.location.pathname.slice(6))\n    // const { username, name, location, bio, id } = this.props.user\n    // const { allSongs } = this.props\n    // this.props.fetchFollowing(this.props.user.id)\n    const displaySong = this.findSong(displaySongID)\n    console.log(displaySong)\n    // const { username, name, location, bio, id } = displayUser\n    // const isCurrentUser = id === this.props.user.id\n    // const isFollowing = this.props.user.id === this.props.followeds.find(f => f.id === id )\n    // console.log('current user? ', isCurrentUser)\n    // console.log('following? ', isFollowing)\n\n    return (\n      <div className={`song-show`}>\n        <Waveform\n          // song={song}\n          // song_link={songData.song_link}\n          song={null}\n          song_link={null}\n          waveHeight={100}\n          responsive={true}\n          splitChannels={false}\n          mediaControls={true}\n          maxCanvasWidth={500}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    allSongs: state.allSongs\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n  // { currentSong }\n)(withRouter(SongShowPage))\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/NewSongForm.js\";\n\n/*eslint-disable */\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Form, Grid, Header, Segment } from \"semantic-ui-react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { postNewSong } from \"../actions\";\n\nclass NewSongForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: \"\",\n      genre: \"\",\n      description: \"\",\n      song_link: \"\",\n      selectedTags: [],\n      allTags: []\n    };\n\n    this.handleNewSongSubmit = e => {\n      e.preventDefault();\n      const user_id = this.props.user.id;\n      this.props.postNewSong(this.state, user_id, this.props.history);\n    };\n\n    this.handleNewSongChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSelectedTags = (e, {\n      value\n    }) => {\n      this.setState({\n        selectedTags: value\n      });\n    };\n\n    this.onFilesAdded = e => {\n      const targetSongLink = e.target.files[0];\n      const titleValue = targetSongLink.name.slice(0, -4);\n      this.setState({\n        song_link: targetSongLink,\n        title: titleValue\n      });\n    };\n\n    this.goBackToProfile = () => {\n      this.props.history(\"/profile/\".concat(this.props.user.id));\n    };\n  }\n\n  componentDidMount() {\n    const fetchTagUrl = \"http://localhost:3000/tags\";\n    fetch(fetchTagUrl).then(res => res.json()).then(data => {\n      this.setState({\n        allTags: data\n      });\n    });\n  }\n\n  render() {\n    // console.log(this.props)\n    const tagOptions = this.state.allTags ? this.state.allTags.map(tag => {\n      return {\n        key: tag.name,\n        text: tag.name,\n        value: tag.name\n      };\n    }) : null; // console.log(this.state)\n\n    return React.createElement(\"div\", {\n      className: \"new-song-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      textAlign: \"center\",\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Form, {\n      size: \"large\",\n      onSubmit: this.handleNewSongSubmit,\n      encType: \"multipart/form-data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"New Song\"), React.createElement(Form.Input, {\n      onChange: this.handleNewSongChange,\n      placeholder: \"Title\",\n      value: this.state.title,\n      type: \"text\",\n      name: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      onChange: this.handleNewSongChange,\n      placeholder: \"Genre\",\n      type: \"text\",\n      name: \"genre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      onChange: this.handleNewSongChange,\n      placeholder: \"Description\",\n      type: \"text\",\n      name: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Form.Dropdown, {\n      onChange: this.handleSelectedTags,\n      search: true,\n      selection: true,\n      multiple: true,\n      input: true,\n      id: \"tag-dropdown\",\n      options: tagOptions,\n      placeholder: \"Select Tags\",\n      name: \"selectedTags\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"audio/*\",\n      onChange: this.onFilesAdded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      primary: true,\n      fluid: true,\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Submit New Song\"))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps, {\n  postNewSong\n})(withRouter(NewSongForm));","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/NewSongForm.js"],"names":["React","Component","connect","Button","Form","Grid","Header","Segment","Link","withRouter","postNewSong","NewSongForm","state","title","genre","description","song_link","selectedTags","allTags","handleNewSongSubmit","e","preventDefault","user_id","props","user","id","history","handleNewSongChange","setState","target","name","value","handleSelectedTags","onFilesAdded","targetSongLink","files","titleValue","slice","goBackToProfile","componentDidMount","fetchTagUrl","fetch","then","res","json","data","render","tagOptions","map","tag","key","text","mapStateToProps"],"mappings":"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","sourcesContent":["/*eslint-disable */\nimport React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Button, Form, Grid, Header, Segment } from \"semantic-ui-react\"\nimport { Link, withRouter } from \"react-router-dom\"\nimport { postNewSong } from \"../actions\"\n\nclass NewSongForm extends Component {\n  state = {\n    title: \"\",\n    genre: \"\",\n    description: \"\",\n    song_link: \"\",\n    selectedTags: [],\n    allTags: []\n  }\n  \n  componentDidMount() {\n    const fetchTagUrl = \"http://localhost:3000/tags\"\n    fetch(fetchTagUrl)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ allTags: data })\n      })\n  }\n\n  handleNewSongSubmit = e => {\n    e.preventDefault()\n    const user_id = this.props.user.id\n    this.props.postNewSong(this.state, user_id, this.props.history)\n  }\n\n  handleNewSongChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  handleSelectedTags = (e, {value}) => {\n    this.setState({selectedTags: value})\n  }\n\n  onFilesAdded = e => {\n    const targetSongLink = e.target.files[0]\n    const titleValue = targetSongLink.name.slice(0,-4)\n    this.setState({ song_link: targetSongLink, title: titleValue })\n  }\n\n  goBackToProfile = () => {\n    this.props.history(`/profile/${this.props.user.id}`)\n  }\n\n  render() {\n    // console.log(this.props)\n    const tagOptions = this.state.allTags\n      ? this.state.allTags.map(tag => {\n          return {\n            key: tag.name,\n            text: tag.name,\n            value: tag.name\n          }\n        })\n      : null\n    // console.log(this.state)\n    return (\n      <div className=\"new-song-form\">\n        <Grid textAlign=\"center\" verticalAlign=\"middle\">\n          <Grid.Column>\n            <Form\n              size=\"large\"\n              onSubmit={this.handleNewSongSubmit}\n              encType=\"multipart/form-data\"\n            >\n              <Segment stacked>\n                <Header as=\"h1\">New Song</Header>\n                <Form.Input\n                  onChange={this.handleNewSongChange}\n                  placeholder=\"Title\"\n                  value={this.state.title}\n                  type=\"text\"\n                  name=\"title\"\n                />\n                <Form.Input\n                  onChange={this.handleNewSongChange}\n                  placeholder=\"Genre\"\n                  type=\"text\"\n                  name=\"genre\"\n                />\n                <Form.Input\n                  onChange={this.handleNewSongChange}\n                  placeholder=\"Description\"\n                  type=\"text\"\n                  name=\"description\"\n                />\n                <Form.Dropdown\n                  onChange={this.handleSelectedTags}\n                  search\n                  selection\n                  multiple\n                  input\n                  id='tag-dropdown'\n                  options={tagOptions}\n                  placeholder=\"Select Tags\"\n                  name=\"selectedTags\"\n                />\n                <input\n                  type=\"file\"\n                  accept='audio/*'\n                  onChange={this.onFilesAdded}\n                />\n                <Button type=\"submit\" primary fluid size=\"large\">\n                  Submit New Song\n                </Button>\n              </Segment>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  { postNewSong }\n)(withRouter(NewSongForm))\n"]},"metadata":{},"sourceType":"module"}
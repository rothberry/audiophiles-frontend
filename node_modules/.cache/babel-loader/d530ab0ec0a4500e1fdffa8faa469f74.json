{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/Waveform.js\";\n\n/*eslint-disable */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button, Icon, Label } from \"semantic-ui-react\";\nconst fetchFavoritesURL = \"http://localhost:3000/favorites\";\n\nclass Waveform extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isPlaying: false,\n      favorites: [],\n      isFavorite: false,\n      favoriteID: \"\",\n      pos: 0,\n      duration: 0\n    };\n\n    this.setIsFavorite = user_id => {\n      const setIsFavorite = this.props.song.favorites.find(fav => {\n        return fav.user_id === user_id;\n      });\n\n      if (setIsFavorite !== undefined) {\n        this.setState({\n          isFavorite: !!setIsFavorite,\n          favoriteID: setIsFavorite.id\n        });\n      }\n    };\n\n    this.handleTogglePlay = () => {\n      if (this.state.isPlaying) {\n        this.wavesurfer.pause();\n        this.setState({\n          isPlaying: !this.state.isPlaying\n        });\n      } else {\n        this.wavesurfer.play();\n        this.setState({\n          isPlaying: !this.state.isPlaying\n        });\n      }\n    };\n\n    this.handleStop = () => {\n      this.setState(prevState => {\n        this.wavesurfer.stop();\n        return {\n          isPlaying: false,\n          pos: 0\n        };\n      });\n    };\n\n    this.handleFavorite = e => {\n      e.preventDefault();\n\n      if (!this.state.isFavorite) {\n        const reqPostObj = {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            user_id: this.props.user.id,\n            song_id: this.props.song.id\n          })\n        };\n        fetch(fetchFavoritesURL, reqPostObj).then(resp => resp.json()).then(data => {\n          // console.log(data)\n          if (!data.errors) {\n            this.setState({\n              favorites: [...this.state.favorites, data],\n              isFavorite: true,\n              favoriteID: data.id\n            });\n          } else {\n            console.log(data);\n            this.setState({\n              isFavorite: false\n            });\n          }\n        }).catch(err => console.log(err));\n      } else {\n        this.handleUnfavorite();\n      }\n    };\n\n    this.handleUnfavorite = () => {\n      const reqDelObj = {\n        method: \"DELETE\"\n      };\n      fetch(\"\".concat(fetchFavoritesURL, \"/\").concat(this.state.favoriteID), reqDelObj).then(res => res.json()).then(data => {\n        if (!data.errors) {\n          let newFavArray = this.state.favorites.filter(fav => fav.id !== this.state.favoriteID);\n          this.setState({\n            favorites: newFavArray,\n            isFavorite: false\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          waveHeight = _this$props.waveHeight,\n          responsive = _this$props.responsive,\n          splitChannels = _this$props.splitChannels,\n          mediaControls = _this$props.mediaControls,\n          maxCanvasWidth = _this$props.maxCanvasWidth,\n          song_link = _this$props.song_link,\n          song = _this$props.song; // TODO Move waveColor and progress color to store\n    // ? let randColor = '#'+(Math.random()*0xFFFFFF<<0).toString(16);\n\n    let waveColor = \"#0C0536\";\n    let progressColor = \"#C0BDCA\";\n    this.$el = ReactDOM.findDOMNode(this);\n    this.$waveform = this.$el.querySelector(\".wave\");\n\n    if (this.$waveform) {\n      this.wavesurfer = WaveSurfer.create({\n        container: this.$waveform,\n        mediaType: \"audio\",\n        waveColor: waveColor,\n        progressColor: progressColor,\n        partialRender: true,\n        height: waveHeight,\n        maxCanvasWidth: maxCanvasWidth,\n        splitChannels: splitChannels,\n        mediaControls: mediaControls,\n        responsive: responsive\n      }); // this.$waveform.style.backgroundColor = \"black\"\n\n      this.wavesurfer.load(song_link);\n      this.wavesurfer.setVolume(0.2); // TODO Add duration to waveform\n\n      this.setState({\n        favorites: song.favorites,\n        duration: this.wavesurfer.getDuration()\n      });\n    } else {\n      console.log(\"waveform loading...\");\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!!this.props.user.id && this.props.user.id !== prevProps.user.id) {\n      this.setIsFavorite(this.props.user.id);\n    }\n  }\n\n  render() {\n    // TODO Make it so only one audio track can play at a time\n    console.log(this.state.favorites, this.state.favoriteID);\n    const buttonStyle = {\n      width: \"20%\"\n    };\n    const favColor = this.state.isFavorite ? \"red\" : \"black\";\n    return React.createElement(\"div\", {\n      className: \"waveform\",\n      style: {\n        cursor: \"text\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), !this.state.isPlaying ? React.createElement(Button, {\n      name: \"play-pause\",\n      style: buttonStyle,\n      onClick: this.handleTogglePlay,\n      circular: true,\n      icon: \"play\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }) : React.createElement(Button, {\n      name: \"play-pause\",\n      style: buttonStyle,\n      onClick: this.handleTogglePlay,\n      circular: true,\n      icon: \"pause\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"stop\",\n      style: buttonStyle,\n      onClick: this.handleStop,\n      circular: true,\n      icon: \"stop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(Button, {\n      as: \"div\",\n      toggle: true,\n      labelPosition: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Button, {\n      icon: true,\n      onClick: this.handleFavorite,\n      circular: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      color: favColor,\n      name: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })), React.createElement(Label, {\n      basic: true,\n      pointing: \"left\",\n      circular: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, this.state.favorites.length)), this.props.showCommentCount ? React.createElement(Label, {\n      icon: \"comments\",\n      iconPosition: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \" \", this.props.song.comments.length) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps, null)(withRouter(Waveform));","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/Waveform.js"],"names":["React","ReactDOM","WaveSurfer","connect","withRouter","Button","Icon","Label","fetchFavoritesURL","Waveform","Component","state","isPlaying","favorites","isFavorite","favoriteID","pos","duration","setIsFavorite","user_id","props","song","find","fav","undefined","setState","id","handleTogglePlay","wavesurfer","pause","play","handleStop","prevState","stop","handleFavorite","e","preventDefault","reqPostObj","method","headers","body","JSON","stringify","user","song_id","fetch","then","resp","json","data","errors","console","log","catch","err","handleUnfavorite","reqDelObj","res","newFavArray","filter","componentDidMount","waveHeight","responsive","splitChannels","mediaControls","maxCanvasWidth","song_link","waveColor","progressColor","$el","findDOMNode","$waveform","querySelector","create","container","mediaType","partialRender","height","load","setVolume","getDuration","componentDidUpdate","prevProps","render","buttonStyle","width","favColor","cursor","length","showCommentCount","comments","mapStateToProps"],"mappings":"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","sourcesContent":["/*eslint-disable */\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport WaveSurfer from \"wavesurfer.js\"\nimport { connect } from \"react-redux\"\nimport { withRouter } from \"react-router-dom\"\nimport { Button, Icon, Label } from \"semantic-ui-react\"\n\nconst fetchFavoritesURL = \"http://localhost:3000/favorites\"\n\nclass Waveform extends React.Component {\n  state = {\n    isPlaying: false,\n    favorites: [],\n    isFavorite: false,\n    favoriteID: \"\",\n    pos: 0,\n    duration: 0\n  }\n\n  componentDidMount() {\n    const {\n      waveHeight,\n      responsive,\n      splitChannels,\n      mediaControls,\n      maxCanvasWidth,\n      song_link,\n      song\n    } = this.props\n    // TODO Move waveColor and progress color to store\n    // ? let randColor = '#'+(Math.random()*0xFFFFFF<<0).toString(16);\n    let waveColor = \"#0C0536\"\n    let progressColor = \"#C0BDCA\"\n    this.$el = ReactDOM.findDOMNode(this)\n    this.$waveform = this.$el.querySelector(\".wave\")\n    if (this.$waveform) {\n      this.wavesurfer = WaveSurfer.create({\n        container: this.$waveform,\n        mediaType: \"audio\",\n        waveColor: waveColor,\n        progressColor: progressColor,\n        partialRender: true,\n        height: waveHeight,\n        maxCanvasWidth: maxCanvasWidth,\n        splitChannels: splitChannels,\n        mediaControls: mediaControls,\n        responsive: responsive\n      })\n      // this.$waveform.style.backgroundColor = \"black\"\n      this.wavesurfer.load(song_link)\n      this.wavesurfer.setVolume(0.2)\n      // TODO Add duration to waveform\n      this.setState({\n        favorites: song.favorites,\n        duration: this.wavesurfer.getDuration()\n      })\n    } else {\n      console.log(\"waveform loading...\")\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!!this.props.user.id && this.props.user.id !== prevProps.user.id) {\n      this.setIsFavorite(this.props.user.id)\n    }\n  }\n\n  setIsFavorite = user_id => {\n    const setIsFavorite = this.props.song.favorites.find(fav => {\n      return fav.user_id === user_id\n    })\n    if (setIsFavorite !== undefined) {\n      this.setState({\n        isFavorite: !!setIsFavorite,\n        favoriteID: setIsFavorite.id\n      })\n    }\n  }\n\n  handleTogglePlay = () => {\n    if (this.state.isPlaying) {\n      this.wavesurfer.pause()\n      this.setState({ isPlaying: !this.state.isPlaying })\n    } else {\n      this.wavesurfer.play()\n      this.setState({ isPlaying: !this.state.isPlaying })\n    }\n  }\n\n  handleStop = () => {\n    this.setState(prevState => {\n      this.wavesurfer.stop()\n      return { isPlaying: false, pos: 0 }\n    })\n  }\n\n  handleFavorite = e => {\n    e.preventDefault()\n    if (!this.state.isFavorite) {\n      const reqPostObj = {\n        method: \"POST\",\n        headers: { \"Content-type\": \"application/json\" },\n        body: JSON.stringify({\n          user_id: this.props.user.id,\n          song_id: this.props.song.id\n        })\n      }\n      fetch(fetchFavoritesURL, reqPostObj)\n        .then(resp => resp.json())\n        .then(data => {\n          // console.log(data)\n          if (!data.errors) {\n            this.setState({\n              favorites: [...this.state.favorites, data],\n              isFavorite: true,\n              favoriteID: data.id\n            })\n          } \n          else {\n            console.log(data)\n            this.setState({isFavorite: false})\n          }\n        })\n        .catch(err => console.log(err))\n    } else {\n      this.handleUnfavorite()\n    }\n  }\n\n  handleUnfavorite = () => {\n    const reqDelObj = {\n      method: \"DELETE\"\n    }\n    fetch(`${fetchFavoritesURL}/${this.state.favoriteID}`, reqDelObj)\n      .then(res => res.json())\n      .then(data => {\n        if (!data.errors) {\n          let newFavArray = this.state.favorites.filter(fav => fav.id !== this.state.favoriteID)\n          this.setState({\n            favorites: newFavArray,\n            isFavorite: false\n          })\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    // TODO Make it so only one audio track can play at a time\n    console.log(this.state.favorites, this.state.favoriteID)\n    const buttonStyle = { width: \"20%\" }\n    const favColor = this.state.isFavorite ? \"red\" : \"black\"\n    return (\n      <div className=\"waveform\" style={{ cursor: \"text\" }}>\n        <div className=\"wave\"></div>\n        {!this.state.isPlaying ? (\n          <Button\n            name=\"play-pause\"\n            style={buttonStyle}\n            onClick={this.handleTogglePlay}\n            circular\n            icon=\"play\"\n          />\n        ) : (\n          <Button\n            name=\"play-pause\"\n            style={buttonStyle}\n            onClick={this.handleTogglePlay}\n            circular\n            icon=\"pause\"\n          />\n        )}\n        <Button\n          name=\"stop\"\n          style={buttonStyle}\n          onClick={this.handleStop}\n          circular\n          icon=\"stop\"\n        />\n        <Button as=\"div\" toggle labelPosition=\"right\">\n          <Button icon onClick={this.handleFavorite} circular>\n            <Icon color={favColor} name=\"heart\" />\n          </Button>\n          {/* <Button icon onClick={this.handleUnfavorite} circular /> */}\n          <Label basic pointing=\"left\" circular>\n            {this.state.favorites.length}\n          </Label>\n        </Button>\n        {/* <Label>{this.state.duration}</Label> */}\n        {this.props.showCommentCount ? (\n          <Label icon=\"comments\" iconPosition=\"left\">\n            {\" \"}\n            {this.props.song.comments.length}\n          </Label>\n        ) : null}\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(withRouter(Waveform))\n"]},"metadata":{},"sourceType":"module"}
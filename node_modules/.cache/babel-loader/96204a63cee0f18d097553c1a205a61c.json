{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/Waveform.js\";\n\n/*eslint-disable */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button, Icon, Label } from \"semantic-ui-react\";\nconst fetchFavoritesURL = \"http://localhost:3000/favorites\";\n\nclass Waveform extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isPlaying: false,\n      pos: 0,\n      duration: 0,\n      favorites: [],\n      isFavorite: false,\n      favoriteID: \"\"\n    };\n\n    this.setIsFavorite = user_id => {\n      const setIsFavorite = this.props.song.favorites.find(fav => {\n        return fav.user_id === user_id;\n      });\n\n      if (setIsFavorite !== undefined) {\n        this.setState({\n          isFavorite: !!setIsFavorite,\n          favoriteID: setIsFavorite.id\n        });\n      }\n    };\n\n    this.handleTogglePlay = () => {\n      if (this.state.isPlaying) {\n        this.wavesurfer.pause();\n        this.setState({\n          isPlaying: !this.state.isPlaying,\n          pos: this.wavesurfer.getCurrentTime()\n        });\n      } else {\n        this.wavesurfer.play();\n        this.setState({\n          isPlaying: !this.state.isPlaying,\n          pos: this.wavesurfer.getCurrentTime()\n        });\n      }\n    };\n\n    this.handleStop = () => {\n      this.setState(prevState => {\n        this.wavesurfer.stop();\n        return {\n          isPlaying: false,\n          pos: 0\n        };\n      });\n    };\n\n    this.handleFavorite = e => {\n      e.preventDefault();\n\n      if (!this.state.isFavorite) {\n        const reqPostObj = {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            user_id: this.props.user.id,\n            song_id: this.props.song.id\n          })\n        };\n        fetch(fetchFavoritesURL, reqPostObj).then(resp => resp.json()).then(data => {\n          console.log(data);\n\n          if (!data.errors) {\n            this.setState({\n              favorites: [...this.state.favorites, data],\n              isFavorite: true,\n              favoriteID: data.id\n            });\n          } else {// this.setState({ isFavorite: true })\n          }\n        }).catch(err => console.log(err));\n      } else {\n        this.handleUnfavorite();\n      }\n    };\n\n    this.handleUnfavorite = () => {\n      const reqDelObj = {\n        method: \"DELETE\"\n      };\n      fetch(\"\".concat(fetchFavoritesURL, \"/\").concat(this.state.favoriteID), reqDelObj).then(res => res.json()).then(data => {\n        if (!data.errors) {\n          let newFavArray = this.state.favorites.filter(fav => fav.id !== this.state.favoriteID);\n          this.setState({\n            favorites: newFavArray,\n            isFavorite: false\n          });\n        } else {// this.setState({ isFavorite: false })\n        }\n      }).catch(err => console.log(err));\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          waveHeight = _this$props.waveHeight,\n          responsive = _this$props.responsive,\n          splitChannels = _this$props.splitChannels,\n          mediaControls = _this$props.mediaControls,\n          maxCanvasWidth = _this$props.maxCanvasWidth,\n          song_link = _this$props.song_link,\n          song = _this$props.song; // TODO Move waveColor and progress color to store\n    // ? let randColor = '#'+(Math.random()*0xFFFFFF<<0).toString(16);\n\n    let waveColor = \"#0C0536\";\n    let progressColor = \"#C0BDCA\";\n    this.$el = ReactDOM.findDOMNode(this);\n    this.$waveform = this.$el.querySelector(\".wave-\".concat(song.id));\n\n    if (this.$waveform) {\n      this.wavesurfer = WaveSurfer.create({\n        container: this.$waveform,\n        mediaType: \"audio\",\n        waveColor: waveColor,\n        progressColor: progressColor,\n        partialRender: true,\n        height: waveHeight,\n        maxCanvasWidth: maxCanvasWidth,\n        splitChannels: splitChannels,\n        mediaControls: mediaControls,\n        responsive: responsive\n      });\n      this.setIsFavorite(song.user.id); // this.$waveform.style.backgroundColor = \"black\"\n\n      this.wavesurfer.load(song_link);\n      this.wavesurfer.setVolume(1); // TODO Add duration to waveform\n\n      this.setState({\n        favorites: song.favorites // duration: this.wavesurfer.getDuration()\n\n      });\n    } else {\n      console.log(\"waveform loading...\");\n    }\n  }\n\n  componentWillUnmount() {\n    this.wavesurfer.stop();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!!this.props.user.id && this.props.user.id !== prevProps.user.id) {\n      this.setIsFavorite(this.props.user.id);\n    }\n  }\n\n  render() {\n    // TODO Make it so only one audio track can play at a time\n    const isLoggedIn = this.props.user.isLoggedIn;\n    console.log(\"wave: \", this.state.isFavorite);\n    const buttonStyle = {\n      width: \"20%\"\n    };\n    const favColor = this.state.isFavorite ? \"red\" : \"black\";\n    return React.createElement(\"div\", {\n      className: \"waveform\",\n      style: {\n        cursor: \"text\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wave-\".concat(this.props.song.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), !this.state.isPlaying ? React.createElement(Button, {\n      name: \"play-pause\",\n      style: buttonStyle,\n      onClick: this.handleTogglePlay,\n      circular: true,\n      icon: \"play\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }) : React.createElement(Button, {\n      name: \"play-pause\",\n      style: buttonStyle,\n      onClick: this.handleTogglePlay,\n      circular: true,\n      icon: \"pause\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"stop\",\n      style: buttonStyle,\n      onClick: this.handleStop,\n      circular: true,\n      icon: \"stop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(Button, {\n      as: \"div\",\n      toggle: true,\n      labelPosition: \"right\",\n      disabled: !isLoggedIn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(Button, {\n      icon: true,\n      onClick: this.handleFavorite,\n      circular: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      color: favColor,\n      name: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(Label, {\n      basic: true,\n      pointing: \"left\",\n      circular: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.state.favorites.length)), this.props.showCommentCount ? React.createElement(Label, {\n      icon: \"comments\",\n      iconPosition: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \" \", this.props.song.comments.length) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps, null)(withRouter(Waveform));","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/Waveform.js"],"names":["React","ReactDOM","WaveSurfer","connect","withRouter","Button","Icon","Label","fetchFavoritesURL","Waveform","Component","state","isPlaying","pos","duration","favorites","isFavorite","favoriteID","setIsFavorite","user_id","props","song","find","fav","undefined","setState","id","handleTogglePlay","wavesurfer","pause","getCurrentTime","play","handleStop","prevState","stop","handleFavorite","e","preventDefault","reqPostObj","method","headers","body","JSON","stringify","user","song_id","fetch","then","resp","json","data","console","log","errors","catch","err","handleUnfavorite","reqDelObj","res","newFavArray","filter","componentDidMount","waveHeight","responsive","splitChannels","mediaControls","maxCanvasWidth","song_link","waveColor","progressColor","$el","findDOMNode","$waveform","querySelector","create","container","mediaType","partialRender","height","load","setVolume","componentWillUnmount","componentDidUpdate","prevProps","render","isLoggedIn","buttonStyle","width","favColor","cursor","length","showCommentCount","comments","mapStateToProps"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,mBAApC;AAEA,MAAMC,iBAAiB,GAAG,iCAA1B;;AAEA,MAAMC,QAAN,SAAuBT,KAAK,CAACU,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,KADqC,GAC7B;AACNC,MAAAA,SAAS,EAAE,KADL;AAENC,MAAAA,GAAG,EAAE,CAFC;AAGNC,MAAAA,QAAQ,EAAE,CAHJ;AAINC,MAAAA,SAAS,EAAE,EAJL;AAKNC,MAAAA,UAAU,EAAE,KALN;AAMNC,MAAAA,UAAU,EAAE;AANN,KAD6B;;AAAA,SA+DrCC,aA/DqC,GA+DrBC,OAAO,IAAI;AACzB,YAAMD,aAAa,GAAG,KAAKE,KAAL,CAAWC,IAAX,CAAgBN,SAAhB,CAA0BO,IAA1B,CAA+BC,GAAG,IAAI;AAC1D,eAAOA,GAAG,CAACJ,OAAJ,KAAgBA,OAAvB;AACD,OAFqB,CAAtB;;AAGA,UAAID,aAAa,KAAKM,SAAtB,EAAiC;AAC/B,aAAKC,QAAL,CAAc;AACZT,UAAAA,UAAU,EAAE,CAAC,CAACE,aADF;AAEZD,UAAAA,UAAU,EAAEC,aAAa,CAACQ;AAFd,SAAd;AAID;AACF,KAzEoC;;AAAA,SA2ErCC,gBA3EqC,GA2ElB,MAAM;AACvB,UAAI,KAAKhB,KAAL,CAAWC,SAAf,EAA0B;AACxB,aAAKgB,UAAL,CAAgBC,KAAhB;AACA,aAAKJ,QAAL,CAAc;AACZb,UAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC,SADX;AAEZC,UAAAA,GAAG,EAAE,KAAKe,UAAL,CAAgBE,cAAhB;AAFO,SAAd;AAID,OAND,MAMO;AACL,aAAKF,UAAL,CAAgBG,IAAhB;AACA,aAAKN,QAAL,CAAc;AACZb,UAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC,SADX;AAEZC,UAAAA,GAAG,EAAE,KAAKe,UAAL,CAAgBE,cAAhB;AAFO,SAAd;AAID;AACF,KAzFoC;;AAAA,SA2FrCE,UA3FqC,GA2FxB,MAAM;AACjB,WAAKP,QAAL,CAAcQ,SAAS,IAAI;AACzB,aAAKL,UAAL,CAAgBM,IAAhB;AACA,eAAO;AAAEtB,UAAAA,SAAS,EAAE,KAAb;AAAoBC,UAAAA,GAAG,EAAE;AAAzB,SAAP;AACD,OAHD;AAID,KAhGoC;;AAAA,SAkGrCsB,cAlGqC,GAkGpBC,CAAC,IAAI;AACpBA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAI,CAAC,KAAK1B,KAAL,CAAWK,UAAhB,EAA4B;AAC1B,cAAMsB,UAAU,GAAG;AACjBC,UAAAA,MAAM,EAAE,MADS;AAEjBC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WAFQ;AAGjBC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBxB,YAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWwB,IAAX,CAAgBlB,EADN;AAEnBmB,YAAAA,OAAO,EAAE,KAAKzB,KAAL,CAAWC,IAAX,CAAgBK;AAFN,WAAf;AAHW,SAAnB;AAQAoB,QAAAA,KAAK,CAACtC,iBAAD,EAAoB8B,UAApB,CAAL,CACGS,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,cAAI,CAACA,IAAI,CAACG,MAAV,EAAkB;AAChB,iBAAK5B,QAAL,CAAc;AACZV,cAAAA,SAAS,EAAE,CAAC,GAAG,KAAKJ,KAAL,CAAWI,SAAf,EAA0BmC,IAA1B,CADC;AAEZlC,cAAAA,UAAU,EAAE,IAFA;AAGZC,cAAAA,UAAU,EAAEiC,IAAI,CAACxB;AAHL,aAAd;AAKD,WAND,MAMO,CACL;AACD;AACF,SAbH,EAcG4B,KAdH,CAcSC,GAAG,IAAIJ,OAAO,CAACC,GAAR,CAAYG,GAAZ,CAdhB;AAeD,OAxBD,MAwBO;AACL,aAAKC,gBAAL;AACD;AACF,KA/HoC;;AAAA,SAiIrCA,gBAjIqC,GAiIlB,MAAM;AACvB,YAAMC,SAAS,GAAG;AAChBlB,QAAAA,MAAM,EAAE;AADQ,OAAlB;AAGAO,MAAAA,KAAK,WAAItC,iBAAJ,cAAyB,KAAKG,KAAL,CAAWM,UAApC,GAAkDwC,SAAlD,CAAL,CACGV,IADH,CACQW,GAAG,IAAIA,GAAG,CAACT,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZ,YAAI,CAACA,IAAI,CAACG,MAAV,EAAkB;AAChB,cAAIM,WAAW,GAAG,KAAKhD,KAAL,CAAWI,SAAX,CAAqB6C,MAArB,CAChBrC,GAAG,IAAIA,GAAG,CAACG,EAAJ,KAAW,KAAKf,KAAL,CAAWM,UADb,CAAlB;AAGA,eAAKQ,QAAL,CAAc;AACZV,YAAAA,SAAS,EAAE4C,WADC;AAEZ3C,YAAAA,UAAU,EAAE;AAFA,WAAd;AAID,SARD,MAQO,CACL;AACD;AACF,OAdH,EAeGsC,KAfH,CAeSC,GAAG,IAAIJ,OAAO,CAACC,GAAR,CAAYG,GAAZ,CAfhB;AAgBD,KArJoC;AAAA;;AAUrCM,EAAAA,iBAAiB,GAAG;AAAA,wBASd,KAAKzC,KATS;AAAA,UAEhB0C,UAFgB,eAEhBA,UAFgB;AAAA,UAGhBC,UAHgB,eAGhBA,UAHgB;AAAA,UAIhBC,aAJgB,eAIhBA,aAJgB;AAAA,UAKhBC,aALgB,eAKhBA,aALgB;AAAA,UAMhBC,cANgB,eAMhBA,cANgB;AAAA,UAOhBC,SAPgB,eAOhBA,SAPgB;AAAA,UAQhB9C,IARgB,eAQhBA,IARgB,EAUlB;AACA;;AACA,QAAI+C,SAAS,GAAG,SAAhB;AACA,QAAIC,aAAa,GAAG,SAApB;AACA,SAAKC,GAAL,GAAWrE,QAAQ,CAACsE,WAAT,CAAqB,IAArB,CAAX;AACA,SAAKC,SAAL,GAAiB,KAAKF,GAAL,CAASG,aAAT,iBAAgCpD,IAAI,CAACK,EAArC,EAAjB;;AACA,QAAI,KAAK8C,SAAT,EAAoB;AAClB,WAAK5C,UAAL,GAAkB1B,UAAU,CAACwE,MAAX,CAAkB;AAClCC,QAAAA,SAAS,EAAE,KAAKH,SADkB;AAElCI,QAAAA,SAAS,EAAE,OAFuB;AAGlCR,QAAAA,SAAS,EAAEA,SAHuB;AAIlCC,QAAAA,aAAa,EAAEA,aAJmB;AAKlCQ,QAAAA,aAAa,EAAE,IALmB;AAMlCC,QAAAA,MAAM,EAAEhB,UAN0B;AAOlCI,QAAAA,cAAc,EAAEA,cAPkB;AAQlCF,QAAAA,aAAa,EAAEA,aARmB;AASlCC,QAAAA,aAAa,EAAEA,aATmB;AAUlCF,QAAAA,UAAU,EAAEA;AAVsB,OAAlB,CAAlB;AAYA,WAAK7C,aAAL,CAAmBG,IAAI,CAACuB,IAAL,CAAUlB,EAA7B,EAbkB,CAclB;;AACA,WAAKE,UAAL,CAAgBmD,IAAhB,CAAqBZ,SAArB;AACA,WAAKvC,UAAL,CAAgBoD,SAAhB,CAA0B,CAA1B,EAhBkB,CAiBlB;;AACA,WAAKvD,QAAL,CAAc;AACZV,QAAAA,SAAS,EAAEM,IAAI,CAACN,SADJ,CAEZ;;AAFY,OAAd;AAID,KAtBD,MAsBO;AACLoC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AACF;;AAED6B,EAAAA,oBAAoB,GAAG;AACrB,SAAKrD,UAAL,CAAgBM,IAAhB;AACD;;AAEDgD,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,CAAC,CAAC,KAAK/D,KAAL,CAAWwB,IAAX,CAAgBlB,EAAlB,IAAwB,KAAKN,KAAL,CAAWwB,IAAX,CAAgBlB,EAAhB,KAAuByD,SAAS,CAACvC,IAAV,CAAelB,EAAlE,EAAsE;AACpE,WAAKR,aAAL,CAAmB,KAAKE,KAAL,CAAWwB,IAAX,CAAgBlB,EAAnC;AACD;AACF;;AA0FD0D,EAAAA,MAAM,GAAG;AACP;AADO,UAECC,UAFD,GAEgB,KAAKjE,KAAL,CAAWwB,IAF3B,CAECyC,UAFD;AAGPlC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,KAAKzC,KAAL,CAAWK,UAAjC;AACA,UAAMsE,WAAW,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAApB;AACA,UAAMC,QAAQ,GAAG,KAAK7E,KAAL,CAAWK,UAAX,GAAwB,KAAxB,GAAgC,OAAjD;AACA,WACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEyE,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,iBAAU,KAAKrE,KAAL,CAAWC,IAAX,CAAgBK,EAA1B,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,CAAC,KAAKf,KAAL,CAAWC,SAAZ,GACC,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,YADP;AAEE,MAAA,KAAK,EAAE0E,WAFT;AAGE,MAAA,OAAO,EAAE,KAAK3D,gBAHhB;AAIE,MAAA,QAAQ,MAJV;AAKE,MAAA,IAAI,EAAC,MALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GASC,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,YADP;AAEE,MAAA,KAAK,EAAE2D,WAFT;AAGE,MAAA,OAAO,EAAE,KAAK3D,gBAHhB;AAIE,MAAA,QAAQ,MAJV;AAKE,MAAA,IAAI,EAAC,OALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAmBE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAE2D,WAFT;AAGE,MAAA,OAAO,EAAE,KAAKtD,UAHhB;AAIE,MAAA,QAAQ,MAJV;AAKE,MAAA,IAAI,EAAC,MALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EA0BE,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,KAAX;AAAiB,MAAA,MAAM,MAAvB;AAAwB,MAAA,aAAa,EAAC,OAAtC;AAA8C,MAAA,QAAQ,EAAE,CAACqD,UAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,MAAZ;AAAa,MAAA,OAAO,EAAE,KAAKlD,cAA3B;AAA2C,MAAA,QAAQ,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEqD,QAAb;AAAuB,MAAA,IAAI,EAAC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAKE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,QAAQ,EAAC,MAAtB;AAA6B,MAAA,QAAQ,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK7E,KAAL,CAAWI,SAAX,CAAqB2E,MADxB,CALF,CA1BF,EAoCG,KAAKtE,KAAL,CAAWuE,gBAAX,GACC,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,YAAY,EAAC,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,EAEG,KAAKvE,KAAL,CAAWC,IAAX,CAAgBuE,QAAhB,CAAyBF,MAF5B,CADD,GAKG,IAzCN,CADF;AA6CD;;AA1MoC;;AA4MvC,MAAMG,eAAe,GAAGlF,KAAK,IAAI;AAC/B,SAAO;AACLiC,IAAAA,IAAI,EAAEjC,KAAK,CAACiC;AADP,GAAP;AAGD,CAJD;;AAMA,eAAezC,OAAO,CACpB0F,eADoB,EAEpB,IAFoB,CAAP,CAGbzF,UAAU,CAACK,QAAD,CAHG,CAAf","sourcesContent":["/*eslint-disable */\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport WaveSurfer from \"wavesurfer.js\"\nimport { connect } from \"react-redux\"\nimport { withRouter } from \"react-router-dom\"\nimport { Button, Icon, Label } from \"semantic-ui-react\"\n\nconst fetchFavoritesURL = \"http://localhost:3000/favorites\"\n\nclass Waveform extends React.Component {\n  state = {\n    isPlaying: false,\n    pos: 0,\n    duration: 0,\n    favorites: [],\n    isFavorite: false,\n    favoriteID: \"\"\n  }\n\n  componentDidMount() {\n    const {\n      waveHeight,\n      responsive,\n      splitChannels,\n      mediaControls,\n      maxCanvasWidth,\n      song_link,\n      song\n    } = this.props\n    // TODO Move waveColor and progress color to store\n    // ? let randColor = '#'+(Math.random()*0xFFFFFF<<0).toString(16);\n    let waveColor = \"#0C0536\"\n    let progressColor = \"#C0BDCA\"\n    this.$el = ReactDOM.findDOMNode(this)\n    this.$waveform = this.$el.querySelector(`.wave-${song.id}`)\n    if (this.$waveform) {\n      this.wavesurfer = WaveSurfer.create({\n        container: this.$waveform,\n        mediaType: \"audio\",\n        waveColor: waveColor,\n        progressColor: progressColor,\n        partialRender: true,\n        height: waveHeight,\n        maxCanvasWidth: maxCanvasWidth,\n        splitChannels: splitChannels,\n        mediaControls: mediaControls,\n        responsive: responsive\n      })\n      this.setIsFavorite(song.user.id)\n      // this.$waveform.style.backgroundColor = \"black\"\n      this.wavesurfer.load(song_link)\n      this.wavesurfer.setVolume(1)\n      // TODO Add duration to waveform\n      this.setState({\n        favorites: song.favorites\n        // duration: this.wavesurfer.getDuration()\n      })\n    } else {\n      console.log(\"waveform loading...\")\n    }\n  }\n\n  componentWillUnmount() {\n    this.wavesurfer.stop()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!!this.props.user.id && this.props.user.id !== prevProps.user.id) {\n      this.setIsFavorite(this.props.user.id)\n    }\n  }\n\n  setIsFavorite = user_id => {\n    const setIsFavorite = this.props.song.favorites.find(fav => {\n      return fav.user_id === user_id\n    })\n    if (setIsFavorite !== undefined) {\n      this.setState({\n        isFavorite: !!setIsFavorite,\n        favoriteID: setIsFavorite.id\n      })\n    }\n  }\n\n  handleTogglePlay = () => {\n    if (this.state.isPlaying) {\n      this.wavesurfer.pause()\n      this.setState({\n        isPlaying: !this.state.isPlaying,\n        pos: this.wavesurfer.getCurrentTime()\n      })\n    } else {\n      this.wavesurfer.play()\n      this.setState({\n        isPlaying: !this.state.isPlaying,\n        pos: this.wavesurfer.getCurrentTime()\n      })\n    }\n  }\n\n  handleStop = () => {\n    this.setState(prevState => {\n      this.wavesurfer.stop()\n      return { isPlaying: false, pos: 0 }\n    })\n  }\n\n  handleFavorite = e => {\n    e.preventDefault()\n    if (!this.state.isFavorite) {\n      const reqPostObj = {\n        method: \"POST\",\n        headers: { \"Content-type\": \"application/json\" },\n        body: JSON.stringify({\n          user_id: this.props.user.id,\n          song_id: this.props.song.id\n        })\n      }\n      fetch(fetchFavoritesURL, reqPostObj)\n        .then(resp => resp.json())\n        .then(data => {\n          console.log(data)\n          if (!data.errors) {\n            this.setState({\n              favorites: [...this.state.favorites, data],\n              isFavorite: true,\n              favoriteID: data.id\n            })\n          } else {\n            // this.setState({ isFavorite: true })\n          }\n        })\n        .catch(err => console.log(err))\n    } else {\n      this.handleUnfavorite()\n    }\n  }\n\n  handleUnfavorite = () => {\n    const reqDelObj = {\n      method: \"DELETE\"\n    }\n    fetch(`${fetchFavoritesURL}/${this.state.favoriteID}`, reqDelObj)\n      .then(res => res.json())\n      .then(data => {\n        if (!data.errors) {\n          let newFavArray = this.state.favorites.filter(\n            fav => fav.id !== this.state.favoriteID\n          )\n          this.setState({\n            favorites: newFavArray,\n            isFavorite: false\n          })\n        } else {\n          // this.setState({ isFavorite: false })\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    // TODO Make it so only one audio track can play at a time\n    const { isLoggedIn } = this.props.user\n    console.log(\"wave: \", this.state.isFavorite)\n    const buttonStyle = { width: \"20%\" }\n    const favColor = this.state.isFavorite ? \"red\" : \"black\"\n    return (\n      <div className=\"waveform\" style={{ cursor: \"text\" }}>\n        <div className={`wave-${this.props.song.id}`}></div>\n        {!this.state.isPlaying ? (\n          <Button\n            name=\"play-pause\"\n            style={buttonStyle}\n            onClick={this.handleTogglePlay}\n            circular\n            icon=\"play\"\n          />\n        ) : (\n          <Button\n            name=\"play-pause\"\n            style={buttonStyle}\n            onClick={this.handleTogglePlay}\n            circular\n            icon=\"pause\"\n          />\n        )}\n        <Button\n          name=\"stop\"\n          style={buttonStyle}\n          onClick={this.handleStop}\n          circular\n          icon=\"stop\"\n        />\n        <Button as=\"div\" toggle labelPosition=\"right\" disabled={!isLoggedIn}>\n          <Button icon onClick={this.handleFavorite} circular>\n            <Icon color={favColor} name=\"heart\" />\n          </Button>\n          {/* <Button icon onClick={this.handleUnfavorite} circular /> */}\n          <Label basic pointing=\"left\" circular>\n            {this.state.favorites.length}\n          </Label>\n        </Button>\n        {/* <Label>{this.state.duration}</Label> */}\n        {this.props.showCommentCount ? (\n          <Label icon=\"comments\" iconPosition=\"left\">\n            {\" \"}\n            {this.props.song.comments.length}\n          </Label>\n        ) : null}\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(withRouter(Waveform))\n"]},"metadata":{},"sourceType":"module"}
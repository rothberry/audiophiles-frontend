{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/SongShowPage.js\";\n\n/*eslint-disable */\nimport React, { Component } from \"react\";\nimport Waveform from \"./Waveform\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Grid, Header } from \"semantic-ui-react\";\nimport { findDisplaySong } from \"../actions\";\n\nclass SongShowPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.goToUserProfile = (event, user_id) => {\n      this.props.history.push(\"/profile/\".concat(user_id));\n    };\n  }\n\n  componentDidMount() {\n    this.props.findDisplaySong(this.props.allSongs, this.props.history);\n  }\n\n  render() {\n    // TODO need current song\n    console.log(this.props.displaySong);\n    let isSong = !!this.props.displaySong;\n    const _this$props$displaySo = this.props.displaySong,\n          song = _this$props$displaySo.song,\n          song_link = _this$props$displaySo.song_link;\n    const mappedTags = isSong ? song.tags.map(tag => React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \" #\", tag.name, \" \")) : null;\n    return React.createElement(\"div\", {\n      className: \"song-show-\".concat(song.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      columns: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"large\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, song.title))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: (event, id) => this.goToUserProfile(event, song.user.id),\n      style: {\n        fontStyle: \"italic\",\n        cursor: \"pointer\",\n        fontSize: \"large\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, song.user.username), React.createElement(\"span\", {\n      style: {\n        fontStyle: \"italic\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, mappedTags))), React.createElement(Waveform, {\n      song: song,\n      song_link: song_link,\n      waveHeight: 125,\n      responsive: true,\n      splitChannels: true,\n      mediaControls: true,\n      maxCanvasWidth: 500,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    displaySong: state.displaySong,\n    allSongs: state.allSongs\n  };\n};\n\nexport default connect(mapStateToProps, {\n  findDisplaySong\n})(withRouter(SongShowPage));","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/SongShowPage.js"],"names":["React","Component","Waveform","withRouter","connect","Button","Grid","Header","findDisplaySong","SongShowPage","goToUserProfile","event","user_id","props","history","push","componentDidMount","allSongs","render","console","log","displaySong","isSong","song","song_link","mappedTags","tags","map","tag","name","id","fontWeight","fontSize","title","user","fontStyle","cursor","username","mapStateToProps","state"],"mappings":"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","sourcesContent":["/*eslint-disable */\nimport React, { Component } from \"react\"\nimport Waveform from \"./Waveform\"\nimport { withRouter } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { Button, Grid, Header } from \"semantic-ui-react\"\nimport { findDisplaySong } from \"../actions\"\n\nclass SongShowPage extends Component {\n  componentDidMount() {\n    this.props.findDisplaySong(this.props.allSongs, this.props.history)\n  }\n\n  goToUserProfile = (event, user_id) => {\n    this.props.history.push(`/profile/${user_id}`)\n  }\n\n  render() {\n    // TODO need current song\n    console.log(this.props.displaySong)\n    let isSong = !!this.props.displaySong\n    const { song, song_link } = this.props.displaySong\n    const mappedTags = isSong\n      ? song.tags.map(tag => <span> #{tag.name} </span>)\n      : null\n    return (\n      <div className={`song-show-${song.id}`}>\n        <Grid.Row columns={4}>\n          <Grid.Column>\n            <span style={{ fontWeight: \"bold\", fontSize: \"large\" }}>\n              {song.title}\n            </span>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column floated=\"left\">\n            <span\n              onClick={(event, id) => this.goToUserProfile(event, song.user.id)}\n              style={{\n                fontStyle: \"italic\",\n                cursor: \"pointer\",\n                fontSize: \"large\"\n              }}\n            >\n              {song.user.username}\n            </span>\n            <span style={{ fontStyle: \"italic\" }}>{mappedTags}</span>\n          </Grid.Column>\n        </Grid.Row>\n        <Waveform\n          song={song}\n          song_link={song_link}\n          waveHeight={125}\n          responsive={true}\n          splitChannels={true}\n          mediaControls={true}\n          maxCanvasWidth={500}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    displaySong: state.displaySong,\n    allSongs: state.allSongs\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  { findDisplaySong }\n)(withRouter(SongShowPage))\n"]},"metadata":{},"sourceType":"module"}
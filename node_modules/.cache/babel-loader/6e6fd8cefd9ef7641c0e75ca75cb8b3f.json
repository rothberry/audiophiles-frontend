{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/SongShowPage.js\";\n\n/*eslint-disable */\nimport React, { Component } from \"react\";\nimport Waveform from \"./Waveform\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Grid, Header } from \"semantic-ui-react\";\nimport { findDisplaySong } from '../actions';\n\nclass SongShowPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      displaySong: {}\n    };\n\n    this.findSong = displaySongID => {\n      if (this.props.allSongs.length > 0) {\n        return this.props.allSongs.find(u => {\n          return u.song.id === displaySongID;\n        });\n      }\n    };\n\n    this.goToUserProfile = (event, user_id) => {\n      this.props.history.push(\"/profile/\".concat(user_id));\n    };\n  }\n\n  componentDidMount() {\n    // this.props.findDisplaySong()\n    const displaySongID = Number(history.location.pathname.slice(7));\n    console.log(displaySongID);\n    const displaySong = this.findSong(displaySongID);\n    console.log(displaySong);\n    this.setState({\n      displaySong\n    });\n  }\n\n  render() {\n    // TODO need current song\n    console.log(this.state);\n    const _this$state$displaySo = this.state.displaySong,\n          song = _this$state$displaySo.song,\n          song_link = _this$state$displaySo.song_link;\n    const mappedTags = song.tags ? song.tags.map(tag => React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" #\", tag.name, \" \")) : null;\n    return React.createElement(\"div\", {\n      className: \"song-show-\".concat(song.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      columns: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"large\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, song.title))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: (event, id) => this.goToUserProfile(event, song.user.id),\n      style: {\n        fontStyle: \"italic\",\n        cursor: \"pointer\",\n        fontSize: \"large\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, song.user.username), React.createElement(\"span\", {\n      style: {\n        fontStyle: \"italic\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, mappedTags))), React.createElement(Waveform, {\n      song: song,\n      song_link: song_link,\n      waveHeight: 125,\n      responsive: true,\n      splitChannels: true,\n      mediaControls: true,\n      maxCanvasWidth: 500,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    displaySong: state.displaySong,\n    allSongs: state.allSongs\n  };\n};\n\nexport default connect(mapStateToProps, // null\n{\n  findDisplaySong\n})(withRouter(SongShowPage));","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/SongShowPage.js"],"names":["React","Component","Waveform","withRouter","connect","Button","Grid","Header","findDisplaySong","SongShowPage","state","displaySong","findSong","displaySongID","props","allSongs","length","find","u","song","id","goToUserProfile","event","user_id","history","push","componentDidMount","Number","location","pathname","slice","console","log","setState","render","song_link","mappedTags","tags","map","tag","name","fontWeight","fontSize","title","user","fontStyle","cursor","username","mapStateToProps"],"mappings":"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","sourcesContent":["/*eslint-disable */\nimport React, { Component } from \"react\"\nimport Waveform from \"./Waveform\"\nimport { withRouter } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { Button, Grid, Header } from \"semantic-ui-react\"\nimport {findDisplaySong} from '../actions'\n\nclass SongShowPage extends Component {\n  state ={\n    displaySong: {}\n  }\n  componentDidMount() {\n    // this.props.findDisplaySong()\n    const displaySongID = Number(history.location.pathname.slice(7))\n    console.log(displaySongID)\n    const displaySong = this.findSong(displaySongID)\n    console.log(displaySong)\n    this.setState({displaySong})\n  }\n  findSong = displaySongID => {\n    if (this.props.allSongs.length > 0) {\n      return this.props.allSongs.find(u => {\n        return u.song.id === displaySongID\n      })\n    }\n  }\n\n  goToUserProfile = (event, user_id) => {\n    this.props.history.push(`/profile/${user_id}`)\n  }\n\n  render() {\n    // TODO need current song\n    console.log(this.state)\n    const { song, song_link } = this.state.displaySong\n    const mappedTags = song.tags ? song.tags.map(tag => <span> #{tag.name} </span>) : null\n    return (\n      <div className={`song-show-${song.id}`}>\n        <Grid.Row columns={4}>\n          <Grid.Column>\n            <span style={{ fontWeight: \"bold\", fontSize: \"large\" }}>\n              {song.title}\n            </span>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column floated=\"left\">\n            <span\n              onClick={(event, id) => this.goToUserProfile(event, song.user.id)}\n              style={{\n                fontStyle: \"italic\",\n                cursor: \"pointer\",\n                fontSize: \"large\"\n              }}\n            >\n              {song.user.username}\n            </span>\n            <span style={{ fontStyle: \"italic\" }} >\n              {mappedTags}\n            </span>\n          </Grid.Column>\n        </Grid.Row>\n        <Waveform\n          song={song}\n          song_link={song_link}\n          waveHeight={125}\n          responsive={true}\n          splitChannels={true}\n          mediaControls={true}\n          maxCanvasWidth={500}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    displaySong: state.displaySong,\n    allSongs: state.allSongs\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  // null\n  { findDisplaySong }\n)(withRouter(SongShowPage))\n"]},"metadata":{},"sourceType":"module"}
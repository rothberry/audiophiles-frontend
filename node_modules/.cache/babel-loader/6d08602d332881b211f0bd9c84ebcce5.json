{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/Waveform.js\";\n\n/*eslint-disable */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button, Icon, Label } from \"semantic-ui-react\";\nconst fetchFavoritesURL = \"http://localhost:3000/favorites\";\n\nclass Waveform extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isPlaying: false,\n      favorites: 0,\n      isFavorite: false,\n      favoriteID: '',\n      pos: 0,\n      duration: 0\n    };\n\n    this.setIsFavorite = () => {\n      const setIsFavorite = this.props.song.favorites.find(fav => {\n        return fav.user_id === this.props.user.id;\n      });\n      this.setState({\n        isFavorite: !!setIsFavorite,\n        favoriteID: setIsFavorite.id\n      });\n    };\n\n    this.handleTogglePlay = () => {\n      if (this.state.isPlaying) {\n        this.wavesurfer.pause();\n        this.setState({\n          isPlaying: !this.state.isPlaying\n        });\n      } else {\n        this.wavesurfer.play();\n        this.setState({\n          isPlaying: !this.state.isPlaying\n        });\n      }\n    };\n\n    this.handleStop = () => {\n      this.setState(prevState => {\n        this.wavesurfer.stop();\n        return {\n          isPlaying: false,\n          pos: 0\n        };\n      });\n    };\n\n    this.handleFavorite = e => {\n      e.preventDefault();\n      const reqPostObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: this.props.user.id,\n          song_id: this.props.song.id\n        })\n      };\n      fetch(fetchFavoritesURL, reqPostObj).then(resp => resp.json()).then(data => {\n        console.log(data);\n\n        if (!data.errors) {\n          this.setState({\n            favorites: this.state.favorites + 1,\n            isFavorite: true\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.handleUnfavorite = e => {\n      // TODO can unfavorite with a DELETE request\n      e.preventDefault();\n      console.log(this.props.song.id);\n      console.log(\"\".concat(fetchFavoritesURL, \"/\").concat(this.props.song.id));\n      const reqDelObj = {\n        method: 'DELETE'\n      };\n      fetch(\"\".concat(fetchFavoritesURL, \"/\").concat(this.props.song.id), reqDelObj).then(res => res.json()).then(data => {\n        if (!data.errors) {\n          this.setState({\n            favorites: this.state.favorites - 1,\n            isFavorite: false\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n  }\n\n  componentDidMount() {\n    // console.log('cdm', this.props)\n    const _this$props = this.props,\n          waveHeight = _this$props.waveHeight,\n          responsive = _this$props.responsive,\n          splitChannels = _this$props.splitChannels,\n          mediaControls = _this$props.mediaControls,\n          maxCanvasWidth = _this$props.maxCanvasWidth,\n          song_link = _this$props.song_link,\n          song = _this$props.song; // TODO Move waveColor and progress color to store\n    // ? let randColor = '#'+(Math.random()*0xFFFFFF<<0).toString(16);\n\n    let waveColor = \"#0C0536\";\n    let progressColor = \"#C0BDCA\"; // let waveColor = \"#C0BDCA\"\n    // let progressColor = \"#0C0536\"\n\n    this.setIsFavorite();\n    this.$el = ReactDOM.findDOMNode(this);\n    this.$waveform = this.$el.querySelector(\".wave\");\n\n    if (this.$waveform) {\n      this.wavesurfer = WaveSurfer.create({\n        container: this.$waveform,\n        mediaType: \"audio\",\n        waveColor: waveColor,\n        progressColor: progressColor,\n        partialRender: true,\n        height: waveHeight,\n        maxCanvasWidth: maxCanvasWidth,\n        splitChannels: splitChannels,\n        mediaControls: mediaControls,\n        responsive: responsive\n      }); // this.$waveform.style.backgroundColor = \"black\"\n\n      this.wavesurfer.load(song_link);\n      this.wavesurfer.setVolume(0.2); // TODO Add duration to waveform\n\n      this.setState({\n        favorites: this.props.song.favorites.length,\n        duration: this.wavesurfer.getDuration() // isFavorite: !!setIsFavorite\n\n      });\n    } else {\n      console.log(\"waveform loading...\");\n    }\n  }\n\n  componentWillReceiveProps() {\n    // console.log('cwrp', this.props)\n    this.setIsFavorite();\n  }\n\n  render() {\n    // TODO Make it so only one audio track can play at a time\n    const buttonStyle = {\n      width: \"20%\"\n    };\n    console.log(this.state);\n    const favColor = this.state.isFavorite ? \"red\" : \"black\";\n    return React.createElement(\"div\", {\n      className: \"waveform\",\n      style: {\n        cursor: \"text\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), !this.state.isPlaying ? React.createElement(Button, {\n      name: \"play-pause\",\n      style: buttonStyle,\n      onClick: this.handleTogglePlay,\n      circular: true,\n      icon: \"play\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }) : React.createElement(Button, {\n      name: \"play-pause\",\n      style: buttonStyle,\n      onClick: this.handleTogglePlay,\n      circular: true,\n      icon: \"pause\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"stop\",\n      style: buttonStyle,\n      onClick: this.handleStop,\n      circular: true,\n      icon: \"stop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(Button, {\n      as: \"div\",\n      toggle: true,\n      labelPosition: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Button, {\n      icon: true,\n      onClick: this.handleFavorite,\n      circular: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      color: favColor,\n      name: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })), React.createElement(Button, {\n      icon: true,\n      onClick: this.handleUnfavorite,\n      circular: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(Label, {\n      basic: true,\n      pointing: \"left\",\n      circular: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, this.state.favorites)), React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, this.state.duration), this.props.showCommentCount ? React.createElement(Label, {\n      icon: \"comments\",\n      iconPosition: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \" \", this.props.song.comments.length) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps, null)(withRouter(Waveform));","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/Waveform.js"],"names":["React","ReactDOM","WaveSurfer","connect","withRouter","Button","Icon","Label","fetchFavoritesURL","Waveform","Component","state","isPlaying","favorites","isFavorite","favoriteID","pos","duration","setIsFavorite","props","song","find","fav","user_id","user","id","setState","handleTogglePlay","wavesurfer","pause","play","handleStop","prevState","stop","handleFavorite","e","preventDefault","reqPostObj","method","headers","body","JSON","stringify","song_id","fetch","then","resp","json","data","console","log","errors","catch","err","handleUnfavorite","reqDelObj","res","componentDidMount","waveHeight","responsive","splitChannels","mediaControls","maxCanvasWidth","song_link","waveColor","progressColor","$el","findDOMNode","$waveform","querySelector","create","container","mediaType","partialRender","height","load","setVolume","length","getDuration","componentWillReceiveProps","render","buttonStyle","width","favColor","cursor","showCommentCount","comments","mapStateToProps"],"mappings":"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","sourcesContent":["/*eslint-disable */\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport WaveSurfer from \"wavesurfer.js\"\nimport { connect } from \"react-redux\"\nimport { withRouter } from \"react-router-dom\"\nimport { Button, Icon, Label } from \"semantic-ui-react\"\n\nconst fetchFavoritesURL = \"http://localhost:3000/favorites\"\n\nclass Waveform extends React.Component {\n  state = {\n    isPlaying: false,\n    favorites: 0,\n    isFavorite: false,\n    favoriteID: '',\n    pos: 0,\n    duration: 0\n  }\n\n  componentDidMount() {\n    // console.log('cdm', this.props)\n    const {\n      waveHeight,\n      responsive,\n      splitChannels,\n      mediaControls,\n      maxCanvasWidth,\n      song_link,\n      song\n    } = this.props\n    // TODO Move waveColor and progress color to store\n    // ? let randColor = '#'+(Math.random()*0xFFFFFF<<0).toString(16);\n    let waveColor = \"#0C0536\"\n    let progressColor = \"#C0BDCA\"\n    // let waveColor = \"#C0BDCA\"\n    // let progressColor = \"#0C0536\"\n    this.setIsFavorite()\n    this.$el = ReactDOM.findDOMNode(this)\n    this.$waveform = this.$el.querySelector(\".wave\")\n    if (this.$waveform) {\n      this.wavesurfer = WaveSurfer.create({\n        container: this.$waveform,\n        mediaType: \"audio\",\n        waveColor: waveColor,\n        progressColor: progressColor,\n        partialRender: true,\n        height: waveHeight,\n        maxCanvasWidth: maxCanvasWidth,\n        splitChannels: splitChannels,\n        mediaControls: mediaControls,\n        responsive: responsive\n      })\n      // this.$waveform.style.backgroundColor = \"black\"\n      this.wavesurfer.load(song_link)\n      this.wavesurfer.setVolume(0.2)\n      // TODO Add duration to waveform\n      this.setState({\n        favorites: this.props.song.favorites.length,\n        duration: this.wavesurfer.getDuration()\n        // isFavorite: !!setIsFavorite\n      })\n    } else {\n      console.log(\"waveform loading...\")\n    }\n  }\n\n  componentWillReceiveProps() {\n    // console.log('cwrp', this.props)\n    this.setIsFavorite()\n  }\n\n  setIsFavorite = () => {\n    const setIsFavorite = this.props.song.favorites.find(fav => {\n      return fav.user_id === this.props.user.id\n    })\n    this.setState({isFavorite: !!setIsFavorite, favoriteID: setIsFavorite.id})\n  }\n\n  handleTogglePlay = () => {\n    if (this.state.isPlaying) {\n      this.wavesurfer.pause()\n      this.setState({ isPlaying: !this.state.isPlaying })\n    } else {\n      this.wavesurfer.play()\n      this.setState({ isPlaying: !this.state.isPlaying })\n    }\n  }\n\n  handleStop = () => {\n    this.setState(prevState => {\n      this.wavesurfer.stop()\n      return { isPlaying: false, pos: 0 }\n    })\n  }\n\n  handleFavorite = e => {\n    e.preventDefault()\n    const reqPostObj = {\n      method: \"POST\",\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify({\n        user_id: this.props.user.id,\n        song_id: this.props.song.id\n      })\n    }\n    fetch(fetchFavoritesURL, reqPostObj)\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data)\n        if (!data.errors) {\n          this.setState({\n            favorites: this.state.favorites + 1,\n            isFavorite: true\n          })\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  handleUnfavorite = (e) => {\n    // TODO can unfavorite with a DELETE request\n    e.preventDefault()\n    console.log(this.props.song.id)\n    console.log(`${fetchFavoritesURL}/${this.props.song.id}`)\n    const reqDelObj = {\n      method: 'DELETE'\n    }\n    fetch(`${fetchFavoritesURL}/${this.props.song.id}`,reqDelObj)\n    .then(res => res.json())\n    .then(data => {\n      if (!data.errors) {\n        this.setState({\n          favorites: this.state.favorites - 1,\n          isFavorite: false\n        })\n      }\n    })\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    // TODO Make it so only one audio track can play at a time\n    const buttonStyle = { width: \"20%\" }\n    console.log(this.state)\n    const favColor = this.state.isFavorite ? \"red\" : \"black\"\n    return (\n      <div className=\"waveform\" style={{ cursor: \"text\" }}>\n        <div className=\"wave\"></div>\n        {!this.state.isPlaying ? (\n          <Button\n            name=\"play-pause\"\n            style={buttonStyle}\n            onClick={this.handleTogglePlay}\n            circular\n            icon=\"play\"\n          />\n        ) : (\n          <Button\n            name=\"play-pause\"\n            style={buttonStyle}\n            onClick={this.handleTogglePlay}\n            circular\n            icon=\"pause\"\n          />\n        )}\n        <Button\n          name=\"stop\"\n          style={buttonStyle}\n          onClick={this.handleStop}\n          circular\n          icon=\"stop\"\n        />\n        <Button as=\"div\" toggle labelPosition=\"right\">\n          <Button icon onClick={this.handleFavorite} circular>\n            <Icon color={favColor} name=\"heart\" />\n          </Button>\n          <Button icon onClick={this.handleUnfavorite} circular />\n          <Label basic pointing=\"left\" circular>\n            {this.state.favorites}\n          </Label>\n        </Button>\n        <Label>{this.state.duration}</Label>\n        {this.props.showCommentCount ? (\n          <Label icon=\"comments\" iconPosition=\"left\">\n            {\" \"}\n            {this.props.song.comments.length}\n          </Label>\n        ) : null}\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(withRouter(Waveform))\n"]},"metadata":{},"sourceType":"module"}
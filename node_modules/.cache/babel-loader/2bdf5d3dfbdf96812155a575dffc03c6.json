{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/SongShowPage.js\";\n\n/*eslint-disable */\nimport React, { Component } from \"react\";\nimport Waveform from \"./Waveform\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { Button, Grid, Header } from \"semantic-ui-react\";\n\nclass SongShowPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.findSong = displaySongID => {\n      if (this.props.allSongs.length > 0) {\n        return this.props.allSongs.find(u => {\n          return u.song.id === displaySongID;\n        });\n      }\n    };\n\n    this.goToUserProfile = (event, user_id) => {\n      // const user_id = this.props.song.user.id\n      this.props.history.push(\"/profile/\".concat(user_id));\n    };\n  }\n\n  render() {\n    // TODO need current song\n    console.log(this.props);\n    const displaySongID = Number(this.props.history.location.pathname.slice(7)); // const { username, name, location, bio, id } = this.props.user\n    // const { allSongs } = this.props\n    // this.props.fetchFollowing(this.props.user.id)\n\n    const displaySong = this.findSong(displaySongID);\n    console.log(displaySong);\n    const song = displaySong.song,\n          song_link = displaySong.song_link; // const isCurrentUser = id === this.props.user.id\n    // const isFollowing = this.props.user.id === this.props.followeds.find(f => f.id === id )\n    // console.log('current user? ', isCurrentUser)\n    // console.log('following? ', isFollowing)\n\n    return React.createElement(\"div\", {\n      className: \"song-show-\".concat(song.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      columns: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: 'large'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, song.title))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      onClick: (event, id) => this.goToUserProfile(event, song.user.id),\n      style: {\n        fontStyle: \"italic\",\n        cursor: \"pointer\",\n        fontSize: 'large'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, song.user.username))), React.createElement(Waveform, {\n      song: song,\n      song_link: song_link,\n      waveHeight: 125,\n      responsive: true,\n      splitChannels: true,\n      mediaControls: true,\n      maxCanvasWidth: 500,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    allSongs: state.allSongs\n  };\n};\n\nexport default connect(mapStateToProps, null // { currentSong }\n)(withRouter(SongShowPage));","map":{"version":3,"sources":["/home/phil/dev/projects/soundclone/mod-5-audiofiles-frontend/src/components/SongShowPage.js"],"names":["React","Component","Waveform","withRouter","connect","Button","Grid","Header","SongShowPage","findSong","displaySongID","props","allSongs","length","find","u","song","id","goToUserProfile","event","user_id","history","push","render","console","log","Number","location","pathname","slice","displaySong","song_link","fontWeight","fontSize","title","user","fontStyle","cursor","username","mapStateToProps","state"],"mappings":"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","sourcesContent":["/*eslint-disable */\nimport React, { Component } from \"react\"\nimport Waveform from \"./Waveform\"\nimport { withRouter } from \"react-router-dom\"\nimport {connect} from 'react-redux'\nimport { Button, Grid, Header } from \"semantic-ui-react\"\n\nclass SongShowPage extends Component {\n\n  findSong = displaySongID => {\n    if (this.props.allSongs.length > 0) {\n      return this.props.allSongs.find(u => {\n        return u.song.id === displaySongID\n      })\n    }\n  }\n  \n  goToUserProfile = (event, user_id) => {\n    // const user_id = this.props.song.user.id\n    this.props.history.push(`/profile/${user_id}`)\n  }\n\n  render() {\n    // TODO need current song\n    console.log(this.props)\n    const displaySongID = Number(this.props.history.location.pathname.slice(7))\n    // const { username, name, location, bio, id } = this.props.user\n    // const { allSongs } = this.props\n    // this.props.fetchFollowing(this.props.user.id)\n    const displaySong = this.findSong(displaySongID)\n    console.log(displaySong)\n    const { song, song_link } = displaySong\n    // const isCurrentUser = id === this.props.user.id\n    // const isFollowing = this.props.user.id === this.props.followeds.find(f => f.id === id )\n    // console.log('current user? ', isCurrentUser)\n    // console.log('following? ', isFollowing)\n\n    return (\n      <div className={`song-show-${song.id}`}>\n        <Grid.Row columns={4}>\n          <Grid.Column>\n            <span style={{ fontWeight: \"bold\", fontSize: 'large' }}>\n              {song.title}\n            </span>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column floated=\"left\">\n            <span\n              onClick={(event, id) => this.goToUserProfile(event, song.user.id)}\n              style={{ fontStyle: \"italic\", cursor: \"pointer\", fontSize: 'large'}}\n            >\n              {song.user.username}\n            </span>\n          </Grid.Column>\n        </Grid.Row>\n        <Waveform\n          song={song}\n          song_link={song_link}\n          waveHeight={125}\n          responsive={true}\n          splitChannels={true}\n          mediaControls={true}\n          maxCanvasWidth={500}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    allSongs: state.allSongs\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n  // { currentSong }\n)(withRouter(SongShowPage))\n"]},"metadata":{},"sourceType":"module"}